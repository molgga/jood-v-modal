(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["GettingStarted"],{7562:function(e,a,t){"use strict";t("a2d5")},a2d5:function(e,a,t){},e575:function(e,a,t){"use strict";t.r(a);var n=t("4430"),d=Object(n["P"])("data-v-49d1480c");Object(n["w"])("data-v-49d1480c");var o={class:"page-view"},l={class:"panel"},s=Object(n["h"])("div",{class:"preview-imgs"},[Object(n["h"])("div",{class:"mg"},[Object(n["h"])("img",{src:"https://user-images.githubusercontent.com/2731262/90951042-02b50f80-e492-11ea-9290-d0b3ac1ce10e.gif",alt:"@jood/v-modal sample image 1"})]),Object(n["h"])("div",{class:"mg"},[Object(n["h"])("img",{src:"https://user-images.githubusercontent.com/2731262/90951211-bec30a00-e493-11ea-88c2-31f3222abad0.gif",alt:"@jood/v-modal sample image 2"})]),Object(n["h"])("div",{class:"mg"},[Object(n["h"])("img",{src:"https://user-images.githubusercontent.com/2731262/90951214-c2569100-e493-11ea-8503-ea700f5c48fb.gif",alt:"@jood/v-modal sample image 3"})])],-1),c=Object(n["h"])("div",{class:"panel-desc"},[Object(n["h"])("p",{class:"pg"}," 패키지의 css 를 적용해야 합니다. css 를 적용할 수 있는 곳이라면 import 하는 위치는 어디라도 상관 없습니다. ")],-1),i=Object(n["f"])('<div class="panel-desc" data-v-49d1480c><ul class="panel-list" data-v-49d1480c><li data-v-49d1480c><em data-v-49d1480c>provideJdModalService</em>는 <em data-v-49d1480c>JdModalService</em>를 공급(provide)합니다. setup한 하위 부터는 <em data-v-49d1480c>useJdModalService</em>로 서비스를 주입(inject)하여 사용할 수 있습니다. </li><li data-v-49d1480c><em data-v-49d1480c>JdModalProvider</em> 컴포넌트를 추가해 줘야 합니다. 해당 컴포넌트는 모달이 열리는 위치와 UI 를 관리하고 모달로 열리는 컴포넌트에 <em data-v-49d1480c>JdModalRef</em>를 공급해 줍니다. <br data-v-49d1480c><em data-v-49d1480c>useModalRef</em>로 <em data-v-49d1480c>Ref</em>(Vue의 Ref와는 관련 없음)를 사용할 수 있고, <em data-v-49d1480c>Ref</em>를 통해 데이터를 전달하거나, 컴포넌트간의 커뮤니케이션을 할 수 있습니다. </li></ul></div>',1),r=Object(n["f"])('<div class="panel-desc" data-v-49d1480c><p class="pg" data-v-49d1480c>Container 컴포넌트와 Modal 컴포넌트 간의 커뮤니케이션은 RxJS 의 Observable 을 사용합니다.</p><ul class="panel-list" data-v-49d1480c><li data-v-49d1480c><a href="https://rxjs-dev.firebaseapp.com/guide/observable" target="_blank" data-v-49d1480c>RxJS Observable</a></li><li data-v-49d1480c><a href="https://medium.com/angular-in-depth/the-best-way-to-unsubscribe-rxjs-observable-in-the-angular-applications-d8f9aa42f6a0" target="_blank" data-v-49d1480c>The Best Way To Unsubscribe RxJS Observables In The Angular Applications!</a></li></ul><p class="pg" data-v-49d1480c>컴포넌트간의 커뮤니케이션 외에도 상태 확인을 위해 몇가지 observable 을 제공합니다.</p><ul class="panel-list" data-v-49d1480c><li data-v-49d1480c> JdModalService <em data-v-49d1480c>observeModalState</em>: 열려있는 모달의 수 등 서비스 상태 변경을 감지할 수 있습니다. </li><li data-v-49d1480c> JdModalRef <em data-v-49d1480c>observeClosed</em>: 모달 컴포넌트가 닫힐 때를 감지하고 모달 컴포넌트에서 전달하는 결과를 받을 수 있습니다. </li><li data-v-49d1480c> JdModalRef <em data-v-49d1480c>observeOpener</em>: 모달 컴포넌트가 열리거나 닫히는 상태를 감지할 수 있습니다. </li></ul></div>',1),m=Object(n["h"])("div",{class:"panel-desc"},[Object(n["h"])("p",{class:"pg"},[Object(n["g"])(" 모달로 열리는 컴포넌트 및 하위 컴포넌트는 "),Object(n["h"])("em",null,"JdModalRef"),Object(n["g"])("이 공급(provide) 되어 있고, "),Object(n["h"])("em",null,"useJdModalRef"),Object(n["g"])("로 주입(inject)하여 사용할 수 있습니다. "),Object(n["h"])("br"),Object(n["h"])("em",null,"Ref"),Object(n["g"])("에 접근할 수 있는 모든 곳에서 모달로 전달된 데이터에 접근하거나, 모달을 닫으며 결과를 전달할 수도 있습니다. ")])],-1);Object(n["u"])();var p=d((function(e,a,t,p,v,b){var u=Object(n["B"])("demo-panel"),f=Object(n["B"])("demo-panel-devider"),j=Object(n["B"])("demo-preview-code");return Object(n["t"])(),Object(n["d"])("div",o,[Object(n["h"])("div",l,[Object(n["h"])(u,{class:"panel-imgs",title:"@jood/v-modal"},{default:d((function(){return[s]})),_:1}),Object(n["h"])(f),Object(n["h"])(j,e.Codes.install,null,16),Object(n["h"])(f),Object(n["h"])(j,e.Codes.main,null,16),Object(n["h"])(f,{half:!0}),c,Object(n["h"])(f),Object(n["h"])(j,e.Codes.app,null,16),Object(n["h"])(f,{half:!0}),i,Object(n["h"])(f),Object(n["h"])(j,e.Codes.someContainer,null,16),Object(n["h"])(f,{half:!0}),r,Object(n["h"])(f),Object(n["h"])(j,e.Codes.someModal,null,16),Object(n["h"])(f,{half:!0}),m])])})),v={install:{title:"package install",description:"",lang:"bash",code:"$ npm install @jood/v-modal\n# or $ yarn add @jood/v-modal"},main:{title:"main.ts",description:"",lang:"typescript",code:"import '@jood/v-modal/dist/v-modal.css';"},app:{title:"App.vue",description:"",lang:"html",code:'\n<template>\n  <div id="app">\n    <jd-modal-provider />\n    <router-view />\n  </div>\n</template>\n\n<script lang="ts">\nimport { defineComponent, onUnmounted } from "@vue/composition-api";\nimport { provideJdModalService, JdModalProvider } from "@jood/v-modal";\n\nexport default defineComponent({\n  components: {\n    JdModalProvider\n  },\n  setup() {\n    provideJdModalService();\n    return {};\n  }\n});\n<\/script>\n    '},someContainer:{title:"MySomeContainer.vue",description:"",lang:"html",code:"\n<template>\n  <div>\n    <button @click=\"onModalOpen\">Modal open</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Subscription } from 'rxjs';\nimport { defineComponent, onUnmounted } from 'vue';\nimport { useJdModalService, ModalOpenStrategy, JdModalRef } from '@jood/v-modal';\nimport MySomeModal from './MySomeModal.vue';\nexport default defineComponent({\n  setup() {\n    const modalService = useJdModalService();\n    const listener = new Subscription();\n    const onModalOpen = () => {\n      const modalRef = modalService.open({\n        component: MySomeModal,\n        overlayClose: true,\n        openStrategy: ModalOpenStrategy.RIGHT_STACK,\n        data: { passParam1: 'pass data', passParam2: 2 },\n      });\n      const observeResult = modalRef.observeClosed().subscribe((result) => {\n        console.log(result);\n        listener.remove(observeResult);\n      });\n      listener.add(observeResult);\n    };\n    onUnmounted(() => {\n      modalService.closeAll();\n      listener.unsubscribe();\n    });\n    return {\n      onModalOpen,\n    };\n  },\n});\n<\/script>\n"},someModal:{title:"MySomeModal.vue",description:"",lang:"html",code:"\n<template>\n  <div>\n    <h1>foo</h1>\n    <button @click=\"onModalClose\">Modal close</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\nimport { useJdModalRef } from '@jood/v-modal';\nexport default defineComponent({\n  setup() {\n    const modalRef = useJdModalRef();\n    const myData = modalRef.data;\n    const onModalClose = () => {\n      modalRef.close({\n        passResult1: 'pass to modalRef',\n        passResult2: 2,\n      });\n    };\n    return {\n      onModalClose,\n    };\n  },\n});\n<\/script>\n"}},b=Object(n["j"])({setup:function(){return{Codes:v}}});t("7562");b.render=p,b.__scopeId="data-v-49d1480c";a["default"]=b}}]);