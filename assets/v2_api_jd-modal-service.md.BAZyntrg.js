import{_ as s,o as a,c as i,R as e}from"./chunks/framework.Io-i1kqv.js";const y=JSON.parse('{"title":"JdModalService","description":"","frontmatter":{},"headers":[],"relativePath":"v2/api/jd-modal-service.md","filePath":"v2/api/jd-modal-service.md"}'),n={name:"v2/api/jd-modal-service.md"},l=e(`<h1 id="jdmodalservice" tabindex="-1">JdModalService <a class="header-anchor" href="#jdmodalservice" aria-label="Permalink to &quot;JdModalService&quot;">​</a></h1><h2 id="📚-method" tabindex="-1">📚 Method <a class="header-anchor" href="#📚-method" aria-label="Permalink to &quot;📚 Method&quot;">​</a></h2><h4 id="init-config" tabindex="-1">init(config) <a class="header-anchor" href="#init-config" aria-label="Permalink to &quot;init(config)&quot;">​</a></h4><p>인스턴스를 초기화 합니다. 지정된 <code>config</code> 를 통한 기본 세팅과 모달 관리를 위한 옵저버 등을 등록합니다.</p><ul><li><code>defaultEntryComponent</code>: 모달이 사용할 Entry 컴포넌트를 지정합니다. 미지정시 기본 Entry 컴포넌트인 JdModalEntry.vue 를 사용합니다.</li></ul><div class="tip custom-block"><p class="custom-block-title">Entry 컴포넌트</p><p>모달을 감싸며 모달의 기능, 모션 처리를 담당하는 컴포넌트입니다. <a href="./../guide/usage.html#계층-구조">💡 계층-구조</a></p></div><hr><h4 id="open-modaldata" tabindex="-1">open(modalData) <a class="header-anchor" href="#open-modaldata" aria-label="Permalink to &quot;open(modalData)&quot;">​</a></h4><p>모달을 엽니다.</p><ul><li><code>modalData</code><ul><li><code>data</code>: 모달에 전달하는 데이터</li><li><code>component</code>: 모달로 열려고 하는 컴포넌트</li><li><code>duration</code>: 열기, 닫기 애니메이션 시간</li><li><code>overlayClose</code>: 오버레이 영역 클릭시 닫기 처리 여부</li><li><code>floatingMode</code>: 중첩 열기시 애니메이트 처리 여부</li><li><code>disableShadow</code>: 그림자 처리 여부</li><li><code>openStrategy</code>: 오픈 방식 전략</li><li><code>entryComponent</code>: 모달을 감싸는(모달 기능 주입, 모션 처리 등을 하는) 컴포넌트</li><li><code>panelStyle</code>: 모달 패널 css 스타일</li></ul></li></ul><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-PXOGG" id="tab-eD7_dKD" checked="checked"><label for="tab-eD7_dKD">모달을 여는곳</label><input type="radio" name="group-PXOGG" id="tab-2ypnAi1"><label for="tab-2ypnAi1">MySomeModalComponent.vue</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modalService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useJdModalService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openModal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modalService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: { hello: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    component: MySomeModalComponent,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">320</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    overlayClose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dropShadow: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modalRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useJdModalRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(modalRef.data); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// { hello: 10000, foo: &#39;bar&#39; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> closeModal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modalRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ closeResultValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div></div><p>아래와 같이 Generic 을 지정하여 분리된 컴포넌트, 컴포저블 코드에서 코드를 관리할 수 있습니다.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-hF-NJ" id="tab-EBtoQeJ" checked="checked"><label for="tab-EBtoQeJ">my-modal.types.ts</label><input type="radio" name="group-hF-NJ" id="tab-bKNdxpk"><label for="tab-bKNdxpk">모달을 여는곳</label><input type="radio" name="group-hF-NJ" id="tab--YYUPBg"><label for="tab--YYUPBg">MySomeModalComponent.vue</label></div><div class="blocks"><div class="language-ts vp-adaptive-theme active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModalData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  hello</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModalResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  closeResultValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modalService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useJdModalService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> openModal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modalRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> modalService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyModalResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyModalData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    data: { hello: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, foo: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyModalData 로 전달해야할 데이터의 코드 힌트를 얻을 수 있습니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    component: MySomeModalComponent,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">320</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    overlayClose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dropShadow: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modalRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observeClosed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result?.closeResultValue); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyModalResult 로 모달에서 넘어오는 데이터의 코드 힌트를 얻을 수 있습니다.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // result 는 모달이 의도치 않게 닫힐 수 있으므로 undefined 일 수 있습니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modalRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useJdModalRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyModalResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyModalData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(modalRef.data?.hello); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyModalData 로 전달받은 데이터의 코드 힌트를 얻을 수 있습니다.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> closeModal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modalRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ closeResultValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyModalResult 로 모달에서 넘겨야하는 데이터의 코드 힌트를 얻을 수 있습니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div></div><hr><h4 id="closebyref-modalref" tabindex="-1">closeByRef(modalRef) <a class="header-anchor" href="#closebyref-modalref" aria-label="Permalink to &quot;closeByRef(modalRef)&quot;">​</a></h4><p>지정된 modalRef 로 서비스를 통해 모달을 닫습니다.</p><hr><h4 id="closebyid-modalid" tabindex="-1">closeById(modalId) <a class="header-anchor" href="#closebyid-modalid" aria-label="Permalink to &quot;closeById(modalId)&quot;">​</a></h4><p>지정된 modalId 로 서비스를 통해 모달을 닫습니다.</p><hr><h4 id="close-modalid" tabindex="-1">close(modalId) <a class="header-anchor" href="#close-modalid" aria-label="Permalink to &quot;close(modalId)&quot;">​</a></h4><p><code>deprecated</code> closeById 와 같습니다.</p><hr><h4 id="closeall-closinganimation" tabindex="-1">closeAll(closingAnimation) <a class="header-anchor" href="#closeall-closinganimation" aria-label="Permalink to &quot;closeAll(closingAnimation)&quot;">​</a></h4><p>해당 서비스를 통해 열린 모달을 모두 닫습니다. <code>closingAnimation</code> 를 <code>false</code> 로 지정시 모달 닫기 애니메이션을 하지 않고 바로 닫습니다.</p><hr><h4 id="setdefaultentrycomponent-component" tabindex="-1">setDefaultEntryComponent(component) <a class="header-anchor" href="#setdefaultentrycomponent-component" aria-label="Permalink to &quot;setDefaultEntryComponent(component)&quot;">​</a></h4><p>모달이 사용할 EntryComponent.vue 를 지정합니다.</p><hr><h4 id="resetdefaultentrycomponent" tabindex="-1">resetDefaultEntryComponent() <a class="header-anchor" href="#resetdefaultentrycomponent" aria-label="Permalink to &quot;resetDefaultEntryComponent()&quot;">​</a></h4><p>Entry 컴포넌트를 기본으로 제공되는 JdModalEntry.vue 를 사용하게 되돌립니다.</p><hr><h4 id="setuseblockbodyscroll-bool" tabindex="-1">setUseBlockBodyScroll(bool) <a class="header-anchor" href="#setuseblockbodyscroll-bool" aria-label="Permalink to &quot;setUseBlockBodyScroll(bool)&quot;">​</a></h4><p>모달의 갯수에 따라 body 의 style(overflow) 속성을 변경하여 scroll 을 막습니다.</p><hr><h4 id="setusehistorystrategy-bool" tabindex="-1">setUseHistoryStrategy(bool) <a class="header-anchor" href="#setusehistorystrategy-bool" aria-label="Permalink to &quot;setUseHistoryStrategy(bool)&quot;">​</a></h4><p>히스토리 모드 사용 여부를 결정합니다.</p><hr><h4 id="sethistorystrategy-historystrategy" tabindex="-1">setHistoryStrategy(HistoryStrategy) <a class="header-anchor" href="#sethistorystrategy-historystrategy" aria-label="Permalink to &quot;setHistoryStrategy(HistoryStrategy)&quot;">​</a></h4><p>히스토리(뒤로가기) 사용 방식을 지정합니다.</p><ul><li><code>HistoryStateStrategy</code>: history.state 를 사용합니다.</li><li><code>HistoryHashStrategy</code>: location.hash 를 사용합니다.</li></ul><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 이제 모달이 열린 후 뒤로가기 하면 모달이 닫힙니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modalService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHistoryStrategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HistoryStateStrategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modalService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUseHistoryStrategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><h4 id="setdefaultopenstrategy-openstrategy" tabindex="-1">setDefaultOpenStrategy(OpenStrategy) <a class="header-anchor" href="#setdefaultopenstrategy-openstrategy" aria-label="Permalink to &quot;setDefaultOpenStrategy(OpenStrategy)&quot;">​</a></h4><p>모달 기본 오픈 전략을 지정합니다.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 이제 모달은 우측에서 열립니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modalService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setDefaultOpenStrategy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StackRight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 이렇게 하면 특정 모달을 열 때만 전략을 지정할 수 있습니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modalService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  component: MyModalComponent,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  openStrategy: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StackLeft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 좌측에서 열립니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>오픈 전략은 몇가지가 기본으로 제공됩니다.</p><ul><li><code>StackNormal</code>: 화면 중앙에서 열립니다. 기본값 입니다.</li><li><code>StackTop</code>: 위에서 열립니다.</li><li><code>StackBottom</code>: 아래에서 열립니다.</li><li><code>StackLeft</code>: 좌측에서 열립니다.</li><li><code>StackRight</code>: 우측에서 열립니다.</li></ul><div class="tip custom-block"><p class="custom-block-title">OpenStrategy</p><p>오픈 전략은 직접 구현도 가능합니다. (링크: 준비중)</p></div><hr><h4 id="observemodalstate" tabindex="-1">observeModalState() <a class="header-anchor" href="#observemodalstate" aria-label="Permalink to &quot;observeModalState()&quot;">​</a></h4><p>모달이 열리거나 닫히는 등 모달 서비스의 상태가 변경 되는것을 감지할 수 있습니다. 예를 들면 열려있는 모달이 없거나, 열려있는 모달이 1개라도 있는지 알 수 있습니다.</p><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modalService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observeModalState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subscribe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">modalState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // modalState.modals.length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="getstate" tabindex="-1">getState() <a class="header-anchor" href="#getstate" aria-label="Permalink to &quot;getState()&quot;">​</a></h4><p>현재 모달의 상태를 알 수 있습니다.</p><hr><h4 id="getmodalref-modalid" tabindex="-1">getModalRef(modalId) <a class="header-anchor" href="#getmodalref-modalid" aria-label="Permalink to &quot;getModalRef(modalId)&quot;">​</a></h4><p>지정된 modalId 로 열려있는 JdModalRef 를 반환합니다.</p><hr><h4 id="hasmodalrefnext-modalid" tabindex="-1">hasModalRefNext(modalId) <a class="header-anchor" href="#hasmodalrefnext-modalid" aria-label="Permalink to &quot;hasModalRefNext(modalId)&quot;">​</a></h4><p>지정된 modalId 의 다음 순번 JdModalRef 가 있는지 확인합니다.</p><hr><h4 id="ismodalreftop" tabindex="-1">isModalRefTop <a class="header-anchor" href="#ismodalreftop" aria-label="Permalink to &quot;isModalRefTop&quot;">​</a></h4><p>지정된 modalId 가 가장 상위 모달인지 여부를 확인합니다.</p><hr><h4 id="swaporder-fromindex-toindex" tabindex="-1">swapOrder(fromIndex, toIndex) <a class="header-anchor" href="#swaporder-fromindex-toindex" aria-label="Permalink to &quot;swapOrder(fromIndex, toIndex)&quot;">​</a></h4><p>fromIndex 위치의 모달을 toIndex 위치의 모달과 위치를 바꿉니다.</p><hr><h4 id="swapordertopbyref-modalref" tabindex="-1">swapOrderTopByRef(modalRef) <a class="header-anchor" href="#swapordertopbyref-modalref" aria-label="Permalink to &quot;swapOrderTopByRef(modalRef)&quot;">​</a></h4><p>지정된 modalRef 모달과 맨 앞의 모달의 위치를 바꿉니다.</p><hr><h4 id="swapordertopbyid-modalid" tabindex="-1">swapOrderTopById(modalId) <a class="header-anchor" href="#swapordertopbyid-modalid" aria-label="Permalink to &quot;swapOrderTopById(modalId)&quot;">​</a></h4><p>지정된 modalId 모달의 위치를 맨 앞으로 옮깁니다.</p><hr><h4 id="pushorder-modalref" tabindex="-1">pushOrder(modalRef) <a class="header-anchor" href="#pushorder-modalref" aria-label="Permalink to &quot;pushOrder(modalRef)&quot;">​</a></h4><p>지정된 modalRef 모달을 맨 앞으로 옮깁니다. 다른 모달의 순서를 뒤로 밀어냅니다.</p><hr><h4 id="pushorderbyid" tabindex="-1">pushOrderById <a class="header-anchor" href="#pushorderbyid" aria-label="Permalink to &quot;pushOrderById&quot;">​</a></h4><p>지정된 modalId 모달을 맨 앞으로 옮깁니다. 다른 모달의 순서를 뒤로 밀어냅니다.</p><hr><h2 id="📚-getter" tabindex="-1">📚 Getter <a class="header-anchor" href="#📚-getter" aria-label="Permalink to &quot;📚  Getter&quot;">​</a></h2><h4 id="id" tabindex="-1">id <a class="header-anchor" href="#id" aria-label="Permalink to &quot;id&quot;">​</a></h4><p>해당 서비스 인스턴스의 고유 id 를 반환합니다.</p><hr><h4 id="modals" tabindex="-1">modals <a class="header-anchor" href="#modals" aria-label="Permalink to &quot;modals&quot;">​</a></h4><p>보유하고 있는(열려있는) <code>JdModalRef[]</code> 를 반환합니다.</p><hr><h4 id="hasmodal" tabindex="-1">hasModal <a class="header-anchor" href="#hasmodal" aria-label="Permalink to &quot;hasModal&quot;">​</a></h4><p>보유하고 있는(열려있는) 모달이 있는 여부를 반환합니다.</p><hr><h4 id="usedblockbodyscroll" tabindex="-1">usedBlockBodyScroll <a class="header-anchor" href="#usedblockbodyscroll" aria-label="Permalink to &quot;usedBlockBodyScroll&quot;">​</a></h4><p>모달이 열린 경우 body scroll block 을 하는지 여부를 반환합니다.</p><p><code>@see</code>: <code>setUseBlockBodyScroll</code></p><hr><h4 id="usedhistorystrategy" tabindex="-1">usedHistoryStrategy <a class="header-anchor" href="#usedhistorystrategy" aria-label="Permalink to &quot;usedHistoryStrategy&quot;">​</a></h4><p>히스토리 모드를 사용하고 있는지 여부를 반환합니다.</p><p><code>@see</code>: <code>setUseHistoryStrategy</code></p><hr><h4 id="historystrategy" tabindex="-1">historyStrategy <a class="header-anchor" href="#historystrategy" aria-label="Permalink to &quot;historyStrategy&quot;">​</a></h4><p>지정 되어있는 히스토리 전략을 반환합니다.</p><p><code>@see</code>: <code>setHistoryStrategy</code></p><hr><h4 id="destroy" tabindex="-1">destroy() <a class="header-anchor" href="#destroy" aria-label="Permalink to &quot;destroy()&quot;">​</a></h4><p>서비스를 파기합니다. 보통은 서비스를 파기할 일이 없습니다.</p><hr>`,105),t=[l];function p(h,r,d,o,k,c){return a(),i("div",null,t)}const g=s(n,[["render",p]]);export{y as __pageData,g as default};
